<template>
    <app>
      <div id="content" slot="content">
        <div class="column-1">
          <div :class="['ticketinfo', customCss]">
            <dl v-show="cfgdata.ShowTicketId">
              <dt class="key">{{ 'Ticket #:' | translate }}</dt>
              <dd class="value">{{ticketDescription}}</dd>
            </dl>
            <dl v-show="cfgdata.ShowPlayerName">
              <dt class="key">{{ 'Name:' | translate }}</dt>
              <dd class="value">{{playerName}}</dd>
            </dl>
            <dl v-show="cfgdata.ShowPlayerId">
              <dt class="key">{{ 'ID:' | translate }}</dt>
              <dd class="value">{{playerID}}</dd>
            </dl>
          </div>
          <button :disabled="claimBtnDisabled" @click="claimPrize" id="claimBtn" class="normal">{{claimBtnContent | translate}}</button>
          <p>{{displayMsg | translate}}</p>
        </div>
        <div class="column-2 claimPrize-footer-height">
          <countdown v-if="remainingTime>1" :countdowntime="remainingTime" @countdown-end="stopCountDown"></countdown>
          <notificationbar></notificationbar>
        </div>
      </div>
    </app>
</template>
<script>
module.exports = {
  name: "claimPrize",
  data() {
    return {
      ticketNo: 1,
      ticketDescription: 1,
      playerName: "",
      playerID: "",
      remainingTime: 1, //seconds
      claimBtnContent: "Claim Prize",
      displayMsg:
        "Congratulations! Please see casino promotions staff to collect your prize.",
      cfgdata: Object
    };
  },
  created() {
  },
  mounted() {
    this.playerID = this.$route.params.playerId;
    const self = this;
    IGTMediaElements.contentCache.getStateElement("sse_cfg").then(data => {
      const cfgdata = JSON.parse(data);
      self.cfgdata = cfgdata;
      self.claimBtnContent = cfgdata.ClaimPrizeButtonContent;
      self.displayMsg = cfgdata.WinningDisplayMessage || self.displayMsg;

      IGTMediaElements.contentCache
        .getStateElement("Verification")
        .then(data => {
          const obj = JSON.parse(data);
          self.remainingTime = obj.VerificationCountDown;
          const ticket = obj.VerificationTickets.find(function(element) {
            return element.PlayerId == self.playerID;
          });
          if (ticket) {
            self.playerName = self.$root.$options.filters.formatWinnerName(
              ticket.PlayerName,
              cfgdata.WinnerNameFormat
            );
            self.ticketDescription = ticket.TicketDescription;
            self.ticketNo = ticket.TicketNumber;
          }
        });
    });
  },
  methods: {
    claimPrize() {
      this.$store.commit("claimPrize/setClaimBtnDisabled", true);
      this.$store.dispatch("claimPrize/ClaimPrizeOnEgm", this.ticketNo)
    },
    stopCountDown() {
      this.$store.commit("claimPrize/setClaimBtnDisabled", true);
      this.$router.push("/drawingInProgress");
    }
  },
  computed: {
    claimBtnDisabled() {
      return this.$store.state.claimPrize.claimBtnDisabled;
    },
    customCss() {
      const height = document.getElementById("app").clientHeight;
      const width = document.getElementById("app").clientWidth;
      return height < width ? "small-ticket-info" : "big-ticket-info";
    }
  }
};
</script>
<style scoped>
@import "../../../style/vdm_button.css";
@import "../../../style/vdm_sse.css";

#claimBtn {
  text-transform: none;
}

p {
  margin: 0.5rem 1rem;
  text-align: center;
}

/* vertical */
@media screen and (min-height: 400px) {
  .claimPrize-footer-height {
    height: 170px;
  }
}
</style>
